var gpio = require('pi-gpio');
var events = require('events');
var util = require('util');

var relays = [
  { id: 1, name: "R1", pin: 22 },
  { id: 2, name: "R2", pin: 11 },
  { id: 3, name: "R3", pin: 13 },
  { id: 4, name: "R4", pin: 15 },
  { id: 5, name: "R5", pin: 16 },
  { id: 6, name: "R6", pin: 18 }
];

function noop(){}

function relayById(id)
{
  for (var i in relays) {
    if (relays[i].id == id) {
      return relays[i]  ;
    }
  }
  throw 'Invalid pin: ' + pin;
}

PecanRelay = function () {
  events.EventEmitter.call(this);

  this.init = function (config, relayInitializedCallback) {
    config = config || [];

    this._count = config.length;

    for (var i in config) {
      var relay = relays[i];
      var relayConfig = config[i];
      relay.name = relayConfig.name;
      relay.on = relayConfig.on;
      relay.off = relayConfig.off;
    }

    relayInitializedCallback = relayInitializedCallback || noop;

    this._initRelays(relayInitializedCallback);
  };

  this._initRelays = function (relayInitializedCallback) {
    this._list().forEach(
      function (r) {
        gpio.open(r.pin, "output", function () {
          // try to read existing value
          gpio.read(r.pin, function (err, val) {
            r.state = val == 1;
            relayInitializedCallback(r);
          });
        });
      });
  };

  this._list = function () {
    return relays.slice(0, this._count);
  },

  this.list = function () {
    return this._list().map(function (r) {
      return {
        name: r.name,
        id: r.id,
        state: r.state
      };
    });
  };

  this.set = function (id, state, callback) {
    var relay = relayById(id);

    gpio.write(relay.pin, state ? 1 : 0, function () {
      relay.state = state;
      (callback || noop)();
    });

    this.emit("set", { id: id, state: state });
  };

  this._name = function (names) {
    for (var i in names) {
      relays[i].name = names[i];
    }
  };
};

util.inherits(PecanRelay, events.EventEmitter);

module.exports = new PecanRelay();