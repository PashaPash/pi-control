var gpio = require('pi-gpio');

var relays = [
  { name: "R1", pin: 22 },
  { name: "R2", pin: 11 },
  { name: "R3", pin: 13 },
  { name: "R4", pin: 15 },
  { name: "R5", pin: 16 },
  { name: "R6", pin: 18 }
];

function noop(){}

function findRelay(pin)
{
  for (var i in relays) {
    if (relays[i].pin == pin) {
      return relays[i]  ;
    }
  }
  throw 'Invalid pin: ' + pin;;
}

var relay = {
  init: function (options) {
    options = options || {};
    var defaults = {
      count: 6
    }

    this._count = options.count || defaults.count;

    if (options.names) {
      this._name(options.names);
    }

    for (var i in this.list()) {
      gpio.open(relays[i].pin, "output");
    }
  },

  list: function () {
    return relays.slice(0, this._count);
  },

  set: function (pin, state, callback) {
    var relay = findRelay(pin);

    gpio.write(pin, state ? 1 : 0, function () {
      relay.on = state;
      (callback || noop)();
    });

  },

  _name: function (names) {
    for (var i in names) {
      relays[i].name = names[i];
    }
  }
};

module.exports = relay;